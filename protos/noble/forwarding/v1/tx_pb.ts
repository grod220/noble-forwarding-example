// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file noble/forwarding/v1/tx.proto (package noble.forwarding.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message noble.forwarding.v1.MsgRegisterAccount
 */
export class MsgRegisterAccount extends Message<MsgRegisterAccount> {
  /**
   * @generated from field: string signer = 1;
   */
  signer = "";

  /**
   * @generated from field: string recipient = 2;
   */
  recipient = "";

  /**
   * @generated from field: string channel = 3;
   */
  channel = "";

  constructor(data?: PartialMessage<MsgRegisterAccount>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.forwarding.v1.MsgRegisterAccount";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "signer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "recipient", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "channel", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRegisterAccount {
    return new MsgRegisterAccount().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRegisterAccount {
    return new MsgRegisterAccount().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRegisterAccount {
    return new MsgRegisterAccount().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRegisterAccount | PlainMessage<MsgRegisterAccount> | undefined, b: MsgRegisterAccount | PlainMessage<MsgRegisterAccount> | undefined): boolean {
    return proto3.util.equals(MsgRegisterAccount, a, b);
  }
}

/**
 * @generated from message noble.forwarding.v1.MsgRegisterAccountResponse
 */
export class MsgRegisterAccountResponse extends Message<MsgRegisterAccountResponse> {
  /**
   * @generated from field: string address = 1;
   */
  address = "";

  constructor(data?: PartialMessage<MsgRegisterAccountResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.forwarding.v1.MsgRegisterAccountResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRegisterAccountResponse {
    return new MsgRegisterAccountResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRegisterAccountResponse {
    return new MsgRegisterAccountResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRegisterAccountResponse {
    return new MsgRegisterAccountResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRegisterAccountResponse | PlainMessage<MsgRegisterAccountResponse> | undefined, b: MsgRegisterAccountResponse | PlainMessage<MsgRegisterAccountResponse> | undefined): boolean {
    return proto3.util.equals(MsgRegisterAccountResponse, a, b);
  }
}

/**
 * @generated from message noble.forwarding.v1.MsgClearAccount
 */
export class MsgClearAccount extends Message<MsgClearAccount> {
  /**
   * @generated from field: string signer = 1;
   */
  signer = "";

  /**
   * @generated from field: string address = 2;
   */
  address = "";

  constructor(data?: PartialMessage<MsgClearAccount>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.forwarding.v1.MsgClearAccount";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "signer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgClearAccount {
    return new MsgClearAccount().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgClearAccount {
    return new MsgClearAccount().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgClearAccount {
    return new MsgClearAccount().fromJsonString(jsonString, options);
  }

  static equals(a: MsgClearAccount | PlainMessage<MsgClearAccount> | undefined, b: MsgClearAccount | PlainMessage<MsgClearAccount> | undefined): boolean {
    return proto3.util.equals(MsgClearAccount, a, b);
  }
}

/**
 * @generated from message noble.forwarding.v1.MsgClearAccountResponse
 */
export class MsgClearAccountResponse extends Message<MsgClearAccountResponse> {
  constructor(data?: PartialMessage<MsgClearAccountResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.forwarding.v1.MsgClearAccountResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgClearAccountResponse {
    return new MsgClearAccountResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgClearAccountResponse {
    return new MsgClearAccountResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgClearAccountResponse {
    return new MsgClearAccountResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgClearAccountResponse | PlainMessage<MsgClearAccountResponse> | undefined, b: MsgClearAccountResponse | PlainMessage<MsgClearAccountResponse> | undefined): boolean {
    return proto3.util.equals(MsgClearAccountResponse, a, b);
  }
}

