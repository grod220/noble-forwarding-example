// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file noble/forwarding/v1/query.proto (package noble.forwarding.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";

/**
 * @generated from message noble.forwarding.v1.QueryAddress
 */
export class QueryAddress extends Message<QueryAddress> {
  /**
   * @generated from field: string channel = 1;
   */
  channel = "";

  /**
   * @generated from field: string recipient = 2;
   */
  recipient = "";

  constructor(data?: PartialMessage<QueryAddress>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.forwarding.v1.QueryAddress";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "channel", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "recipient", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAddress {
    return new QueryAddress().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAddress {
    return new QueryAddress().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAddress {
    return new QueryAddress().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAddress | PlainMessage<QueryAddress> | undefined, b: QueryAddress | PlainMessage<QueryAddress> | undefined): boolean {
    return proto3.util.equals(QueryAddress, a, b);
  }
}

/**
 * @generated from message noble.forwarding.v1.QueryAddressResponse
 */
export class QueryAddressResponse extends Message<QueryAddressResponse> {
  /**
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * @generated from field: bool exists = 2;
   */
  exists = false;

  constructor(data?: PartialMessage<QueryAddressResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.forwarding.v1.QueryAddressResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "exists", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAddressResponse {
    return new QueryAddressResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAddressResponse {
    return new QueryAddressResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAddressResponse {
    return new QueryAddressResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAddressResponse | PlainMessage<QueryAddressResponse> | undefined, b: QueryAddressResponse | PlainMessage<QueryAddressResponse> | undefined): boolean {
    return proto3.util.equals(QueryAddressResponse, a, b);
  }
}

/**
 * @generated from message noble.forwarding.v1.QueryStats
 */
export class QueryStats extends Message<QueryStats> {
  constructor(data?: PartialMessage<QueryStats>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.forwarding.v1.QueryStats";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryStats {
    return new QueryStats().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryStats {
    return new QueryStats().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryStats {
    return new QueryStats().fromJsonString(jsonString, options);
  }

  static equals(a: QueryStats | PlainMessage<QueryStats> | undefined, b: QueryStats | PlainMessage<QueryStats> | undefined): boolean {
    return proto3.util.equals(QueryStats, a, b);
  }
}

/**
 * @generated from message noble.forwarding.v1.QueryStatsResponse
 */
export class QueryStatsResponse extends Message<QueryStatsResponse> {
  /**
   * @generated from field: map<string, noble.forwarding.v1.Stats> stats = 1;
   */
  stats: { [key: string]: Stats } = {};

  constructor(data?: PartialMessage<QueryStatsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.forwarding.v1.QueryStatsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "stats", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Stats} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryStatsResponse {
    return new QueryStatsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryStatsResponse {
    return new QueryStatsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryStatsResponse {
    return new QueryStatsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryStatsResponse | PlainMessage<QueryStatsResponse> | undefined, b: QueryStatsResponse | PlainMessage<QueryStatsResponse> | undefined): boolean {
    return proto3.util.equals(QueryStatsResponse, a, b);
  }
}

/**
 * @generated from message noble.forwarding.v1.QueryStatsByChannel
 */
export class QueryStatsByChannel extends Message<QueryStatsByChannel> {
  /**
   * @generated from field: string channel = 1;
   */
  channel = "";

  constructor(data?: PartialMessage<QueryStatsByChannel>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.forwarding.v1.QueryStatsByChannel";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "channel", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryStatsByChannel {
    return new QueryStatsByChannel().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryStatsByChannel {
    return new QueryStatsByChannel().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryStatsByChannel {
    return new QueryStatsByChannel().fromJsonString(jsonString, options);
  }

  static equals(a: QueryStatsByChannel | PlainMessage<QueryStatsByChannel> | undefined, b: QueryStatsByChannel | PlainMessage<QueryStatsByChannel> | undefined): boolean {
    return proto3.util.equals(QueryStatsByChannel, a, b);
  }
}

/**
 * @generated from message noble.forwarding.v1.QueryStatsByChannelResponse
 */
export class QueryStatsByChannelResponse extends Message<QueryStatsByChannelResponse> {
  /**
   * @generated from field: uint64 num_of_accounts = 1;
   */
  numOfAccounts = protoInt64.zero;

  /**
   * @generated from field: uint64 num_of_forwards = 2;
   */
  numOfForwards = protoInt64.zero;

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin total_forwarded = 3;
   */
  totalForwarded: Coin[] = [];

  constructor(data?: PartialMessage<QueryStatsByChannelResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.forwarding.v1.QueryStatsByChannelResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "num_of_accounts", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "num_of_forwards", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "total_forwarded", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryStatsByChannelResponse {
    return new QueryStatsByChannelResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryStatsByChannelResponse {
    return new QueryStatsByChannelResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryStatsByChannelResponse {
    return new QueryStatsByChannelResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryStatsByChannelResponse | PlainMessage<QueryStatsByChannelResponse> | undefined, b: QueryStatsByChannelResponse | PlainMessage<QueryStatsByChannelResponse> | undefined): boolean {
    return proto3.util.equals(QueryStatsByChannelResponse, a, b);
  }
}

/**
 * @generated from message noble.forwarding.v1.Stats
 */
export class Stats extends Message<Stats> {
  /**
   * @generated from field: string chain_id = 1;
   */
  chainId = "";

  /**
   * @generated from field: uint64 num_of_accounts = 2;
   */
  numOfAccounts = protoInt64.zero;

  /**
   * @generated from field: uint64 num_of_forwards = 3;
   */
  numOfForwards = protoInt64.zero;

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin total_forwarded = 4;
   */
  totalForwarded: Coin[] = [];

  constructor(data?: PartialMessage<Stats>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.forwarding.v1.Stats";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "chain_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "num_of_accounts", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "num_of_forwards", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "total_forwarded", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Stats {
    return new Stats().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Stats {
    return new Stats().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Stats {
    return new Stats().fromJsonString(jsonString, options);
  }

  static equals(a: Stats | PlainMessage<Stats> | undefined, b: Stats | PlainMessage<Stats> | undefined): boolean {
    return proto3.util.equals(Stats, a, b);
  }
}

