// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file noble/forwarding/v1/account.proto (package noble.forwarding.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { BaseAccount } from "../../../cosmos/auth/v1beta1/auth_pb.js";

/**
 * @generated from message noble.forwarding.v1.ForwardingAccount
 */
export class ForwardingAccount extends Message<ForwardingAccount> {
  /**
   * @generated from field: cosmos.auth.v1beta1.BaseAccount base_account = 1;
   */
  baseAccount?: BaseAccount;

  /**
   * @generated from field: string channel = 2;
   */
  channel = "";

  /**
   * @generated from field: string recipient = 3;
   */
  recipient = "";

  /**
   * @generated from field: int64 created_at = 4;
   */
  createdAt = protoInt64.zero;

  constructor(data?: PartialMessage<ForwardingAccount>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.forwarding.v1.ForwardingAccount";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "base_account", kind: "message", T: BaseAccount },
    { no: 2, name: "channel", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "recipient", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "created_at", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ForwardingAccount {
    return new ForwardingAccount().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ForwardingAccount {
    return new ForwardingAccount().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ForwardingAccount {
    return new ForwardingAccount().fromJsonString(jsonString, options);
  }

  static equals(a: ForwardingAccount | PlainMessage<ForwardingAccount> | undefined, b: ForwardingAccount | PlainMessage<ForwardingAccount> | undefined): boolean {
    return proto3.util.equals(ForwardingAccount, a, b);
  }
}

/**
 * @generated from message noble.forwarding.v1.ForwardingPubKey
 */
export class ForwardingPubKey extends Message<ForwardingPubKey> {
  /**
   * @generated from field: bytes key = 1;
   */
  key = new Uint8Array(0);

  constructor(data?: PartialMessage<ForwardingPubKey>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "noble.forwarding.v1.ForwardingPubKey";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ForwardingPubKey {
    return new ForwardingPubKey().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ForwardingPubKey {
    return new ForwardingPubKey().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ForwardingPubKey {
    return new ForwardingPubKey().fromJsonString(jsonString, options);
  }

  static equals(a: ForwardingPubKey | PlainMessage<ForwardingPubKey> | undefined, b: ForwardingPubKey | PlainMessage<ForwardingPubKey> | undefined): boolean {
    return proto3.util.equals(ForwardingPubKey, a, b);
  }
}

